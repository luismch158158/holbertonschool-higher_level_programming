===============================
 How to Use 101-lazy_matrix_mul.py
===============================

This library is very simple, since it only has one function called
``lazy_matrix_mul(m_a, m_b)``

File ``101-lazy_matrix_mul.py``

Return: New result matrix 

Importing the function:

        >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Checks to realise:

        >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
 	 [15 22]]

	>>> print(lazy_matrix_mul([[8, -1], [5, 1]], [[2, 5], [2, 1]]))
	[[14 39]
 	 [12 26]]

	>>> print(lazy_matrix_mul([[4, 1]], "Hello"))
	Traceback (most recent call last):
		...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> print(lazy_matrix_mul(["Hello", "How"], [[80, -5]]))
	Traceback (most recent call last):
		...
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

	>>> print(lazy_matrix_mul([[4, 4.5]], ["Hello", "Cat"]))
	Traceback (most recent call last):
		...
     	TypeError: invalid data type for einsum

	>>> print(lazy_matrix_mul([[48, 55], [-5, 22]]))
	Traceback (most recent call last):
		...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'matrix_b'

	>>> print(lazy_matrix_mul([[48, 51]], [[]]))
	Traceback (most recent call last):
		...
	ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

	>>> print(lazy_matrix_mul([], [[23, 5]]))
	Traceback (most recent call last):
		...
	ValueError: shapes (0,) and (1,2) not aligned: 0 (dim 0) != 1 (dim 0)

	>>> print(lazy_matrix_mul([[44, 2], [55, 4]], [[5, "Print"], [56, []]]))
	Traceback (most recent call last):
		...
	ValueError: setting an array element with a sequence

	>>> print(lazy_matrix_mul([[5, 44], [55.5]], [[2, 42], [5.21, 55]]))
	Traceback (most recent call last):
		...
	ValueError: setting an array element with a sequence.
