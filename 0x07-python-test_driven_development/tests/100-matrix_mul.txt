===============================
 How to Use 100-matrix_mul.py
===============================

This library is very simple, since it only has one function called
``matrix_mul(m_a, m_b)``

File ``100-matrix_mul.py``

Return: New result matrix 

Importing the function:

        >>> matrix_mul = __import__("100-matrix_mul").matrix_mul

Checks to realise:

        >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[7, 10], [15, 22]]

	>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
	[[13, 16]]

	>>> print(matrix_mul([[8, -1], [5, 1]], [[2, 5], [2, 1]]))
	[[14, 39], [12, 26]]

	>>> print(matrix_mul([[4, 1]], "Hello"))
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list

	>>> print(matrix_mul(["Hello", "How"], [[80, -5]]))
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists

	>>> print(matrix_mul([[4, 4.5]], ["Hello", "Cat"]))
	Traceback (most recent call last):
		...
     	TypeError: m_b must be a list of lists

	>>> print(matrix_mul([[48, 55], [-5, 22]]))
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

	>>> print(matrix_mul([[48, 51]], [[]]))
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

	>>> print(matrix_mul([], [[23, 5]]))
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> print(matrix_mul([[44, 2], [55, 4]], [[5, "Print"], [56, []]]))
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats

	>>> print(matrix_mul([[5, 44], [55.5]], [[2, 42], [5.21, 55]]))
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size
